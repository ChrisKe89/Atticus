/**
 * Autogenerated documentation for `tests/unit/rbac.test.ts` within the Atticus codebase.
 * Key exports: follow the named or default exports defined below; inputs and outputs remain as implemented and correlate with related modules via existing imports.
 * Documentation onlyâ€”do not modify runtime behavior when updating this comment.
 */

import { describe, expect, it } from "vitest";
import type { Session } from "next-auth";
import { Role } from "@prisma/client";
import {
  canEditGlossary,
  canReviewGlossary,
  ensureRole,
  requireSession,
  ForbiddenError,
  UnauthorizedError,
} from "@/lib/rbac";

const baseSession: Session = {
  user: {
    id: "user-1",
    role: Role.ADMIN,
    orgId: "org-1",
    email: "admin@example.com",
    name: "Admin",
  },
  expires: new Date(Date.now() + 60_000).toISOString(),
};

describe("RBAC helpers", () => {
  it("requires a session", () => {
    expect(() => requireSession(null)).toThrow(UnauthorizedError);
    expect(requireSession(baseSession)).toBe(baseSession);
  });

  it("checks allowed roles", () => {
    expect(ensureRole(baseSession, [Role.ADMIN, Role.REVIEWER])).toBe(baseSession);
    const userSession: Session = {
      ...baseSession,
      user: { ...baseSession.user, role: Role.USER },
    };
    expect(() => ensureRole(userSession, [Role.ADMIN])).toThrow(ForbiddenError);
  });

  it("allows reviewers to view glossary but not edit", () => {
    const reviewerSession: Session = {
      ...baseSession,
      user: { ...baseSession.user, role: Role.REVIEWER },
    };
    expect(canReviewGlossary(reviewerSession)).toBe(reviewerSession);
    expect(() => canEditGlossary(reviewerSession)).toThrow(ForbiddenError);
  });

  it("allows admins to edit glossary", () => {
    expect(canEditGlossary(baseSession)).toBe(baseSession);
  });
});
