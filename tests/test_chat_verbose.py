"""Autogenerated documentation for `tests/test_chat_verbose.py` within the Atticus project.

This module participates in the documentation pipeline by summarizing the purpose and exports declared below without altering runtime semantics.
Key exports: review the functions, classes, and constants defined in this file when tracing dependencies across the codebase.
Documentation onlyâ€”do not change runtime behavior when updating this note.
"""

import asyncio
from types import SimpleNamespace

import pytest

from api.routes.chat import ask_endpoint
from api.schemas import AskRequest


class _DummyLogger:
    def info(self, *args, **kwargs):
        pass


def test_ask_endpoint_emits_verbose_logs(monkeypatch: pytest.MonkeyPatch) -> None:
    citations = [
        SimpleNamespace(
            chunk_id="chunk-1",
            source_path="content/manuals/guide.pdf",
            page_number=5,
            heading="Overview",
            score=0.87,
        )
    ]

    def fake_answer_question(*args, **kwargs):
        return SimpleNamespace(
            response="All systems operational.",
            confidence=0.72,
            should_escalate=False,
            citations=citations,
        )

    log_calls: list[tuple[str, dict]] = []

    def fake_log_event(logger, event: str, **payload):
        log_calls.append((event, payload))

    def fake_count_tokens(value: str) -> int:
        return len(value.split())

    monkeypatch.setattr("api.routes.chat.answer_question", fake_answer_question)
    monkeypatch.setattr("api.routes.chat.log_event", fake_log_event)
    monkeypatch.setattr("api.routes.chat.count_tokens", fake_count_tokens)

    payload = AskRequest(
        question="Explain the workflow", filters={"family": "C7070"}, top_k=3, models=["C7070"]
    )
    request = SimpleNamespace(state=SimpleNamespace(request_id="req-001"))
    settings = SimpleNamespace(verbose_logging=True, trace_logging=True, openai_api_key=None)

    response = asyncio.run(ask_endpoint(payload, request, settings, _DummyLogger()))

    assert response.answer == "All systems operational."
    assert response.sources[0].path == "content/manuals/guide.pdf"
    assert response.answers is not None and len(response.answers) == 1
    first_answer = response.answers[0]
    assert first_answer.model in (None, "Apeos C7070")

    # Two log events: completion + verbose chat turn
    assert {event for event, _ in log_calls} == {"ask_endpoint_complete", "chat_turn"}
    chat_turn_payload = dict(log_calls)["chat_turn"]  # keys are unique in this test, safe to coerce
    assert "Overview" in chat_turn_payload["sources"][0]
