"""Autogenerated documentation for `scripts/rollback.py` within the Atticus project.

This module participates in the documentation pipeline by summarizing the purpose and exports declared below without altering runtime semantics.
Key exports: review the functions, classes, and constants defined in this file when tracing dependencies across the codebase.
Documentation onlyâ€”do not change runtime behavior when updating this note.
"""

from __future__ import annotations

import argparse
import os
import shutil
from pathlib import Path

from atticus.config import AppSettings, load_manifest, load_settings, write_manifest
from atticus.logging import configure_logging, log_event
from atticus.vector_db import PgVectorRepository, load_metadata
from eval.runner import load_gold_set
from retriever.vector_store import VectorStore

SNAPSHOT_METADATA = "index_metadata.json"
SNAPSHOT_MANIFEST = "manifest.json"


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Rollback Atticus vector index")
    parser.add_argument(
        "--snapshot", type=Path, default=None, help="Specific snapshot directory to restore"
    )
    parser.add_argument("--skip-smoke", action="store_true", help="Skip smoke tests after rollback")
    parser.add_argument(
        "--limit", type=int, default=20, help="Number of gold queries for smoke testing"
    )
    parser.add_argument("--config", type=Path, help="Path to an alternate config.yaml")
    return parser.parse_args()


def _latest_snapshot_dir(directory: Path) -> Path:
    candidates = sorted([path for path in directory.iterdir() if path.is_dir()])
    if not candidates:
        raise FileNotFoundError(f"No snapshots found in {directory}")
    return candidates[-1]


def _run_smoke_tests(settings: AppSettings, logger, limit: int) -> list[str]:
    store = VectorStore(settings, logger)
    gold_examples = load_gold_set(settings.gold_set_path)[:limit]
    missing: list[str] = []
    for example in gold_examples:
        results = store.search(example.question, top_k=5)
        if not results:
            missing.append(example.question)
    return missing


def main() -> None:
    args = parse_args()
    if args.config:
        os.environ["CONFIG_PATH"] = str(args.config)
    settings = load_settings()
    logger = configure_logging(settings)

    if not settings.database_url:
        raise ValueError("DATABASE_URL must be configured before running rollback")

    snapshot_dir = args.snapshot or _latest_snapshot_dir(settings.snapshots_dir)
    metadata_path = snapshot_dir / SNAPSHOT_METADATA
    manifest_path = snapshot_dir / SNAPSHOT_MANIFEST
    if not metadata_path.exists() or not manifest_path.exists():
        raise FileNotFoundError(
            f"Snapshot {snapshot_dir} is missing {SNAPSHOT_METADATA} or {SNAPSHOT_MANIFEST}"
        )

    snapshot_manifest = load_manifest(manifest_path)
    if snapshot_manifest is None:
        raise FileNotFoundError(f"Snapshot manifest {manifest_path} is invalid or missing")

    chunks = load_metadata(metadata_path)
    repository = PgVectorRepository(settings)
    repository.ensure_schema()
    repository.truncate()

    documents = snapshot_manifest.documents
    ingest_time = snapshot_manifest.created_at

    chunks_by_document: dict[str, list] = {}
    for chunk in chunks:
        entry = chunks_by_document.setdefault(chunk.document_id, [])
        entry.append(chunk)

    for document_id, doc_chunks in chunks_by_document.items():
        if not doc_chunks:
            continue
        source_path = doc_chunks[0].source_path
        metadata = documents.get(source_path, {})
        repository.replace_document(
            document_id=document_id,
            source_path=source_path,
            sha256=str(metadata.get("sha256", "")),
            source_type=metadata.get("source_type"),
            chunks=doc_chunks,
            ingest_time=ingest_time,
        )

    shutil.copy2(metadata_path, settings.metadata_path)
    shutil.copy2(manifest_path, settings.manifest_path)

    restored_manifest = load_manifest(settings.manifest_path)
    if restored_manifest is None:
        write_manifest(settings.manifest_path, snapshot_manifest)
        restored_manifest = snapshot_manifest

    log_event(
        logger,
        "rollback_restored",
        snapshot=str(snapshot_dir),
        chunk_count=len(chunks),
        document_count=len(restored_manifest.documents),
    )

    if args.skip_smoke:
        print("Rollback complete. Smoke tests skipped.")
        return

    missing = _run_smoke_tests(settings, logger, args.limit)
    if missing:
        print("Rollback completed, but some queries returned no results:")
        for query in missing:
            print(f"  - {query}")
        print("Investigate the restored index before releasing.")
    else:
        print("Rollback validated successfully. All smoke tests returned results.")
    print("Tag the rollback commit and update CHANGELOG.md with details.")


if __name__ == "__main__":
    main()
