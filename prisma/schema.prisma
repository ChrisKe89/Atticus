// Prisma schema for Atticus auth + glossary RBAC
// Generated as part of Phase 3 Auth & RBAC rollout.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  REVIEWER
  ADMIN
}

enum GlossaryStatus {
  PENDING
  APPROVED
  REJECTED
}

model Organization {
  id        String          @id @default(cuid())
  name      String
  users     User[]
  glossary  GlossaryEntry[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([name])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  emailVerified DateTime?
  image         String?
  role          Role             @default(USER)
  orgId         String
  org           Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]
  glossaryAuthored GlossaryEntry[] @relation("GlossaryAuthor")
  glossaryUpdated GlossaryEntry[] @relation("GlossaryUpdatedBy")
  glossaryReviewed GlossaryEntry[] @relation("GlossaryReviewer")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GlossaryEntry {
  id           String          @id @default(cuid())
  term         String
  definition   String          @db.Text
  synonyms     String[]        @default([])
  status       GlossaryStatus  @default(PENDING)
  orgId        String
  org          Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  authorId     String
  author       User            @relation("GlossaryAuthor", fields: [authorId], references: [id])
  updatedById  String?
  updatedBy    User?           @relation("GlossaryUpdatedBy", fields: [updatedById], references: [id])
  reviewerId   String?
  reviewer     User?           @relation("GlossaryReviewer", fields: [reviewerId], references: [id])
  reviewNotes  String?         @db.Text
  reviewedAt   DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@unique([orgId, term])
  @@index([orgId, status])
  @@index([status, reviewedAt])
}

model AtticusDocument {
  id          String          @id @map("document_id")
  sourcePath  String          @unique @map("source_path")
  sha256      String
  sourceType  String?         @map("source_type")
  metadata    Json            @map("metadata") @db.JsonB
  chunkCount  Int             @default(0) @map("chunk_count")
  ingestedAt  DateTime        @default(now()) @map("ingested_at") @db.Timestamptz(6)
  updatedAt   DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)

  chunks      AtticusChunk[]

  @@map("atticus_documents")
}

model AtticusChunk {
  id          String          @id @map("chunk_id")
  documentId  String          @map("document_id")
  document    AtticusDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sourcePath  String          @map("source_path")
  position    Int
  text        String
  section     String?
  pageNumber  Int?            @map("page_number")
  tokenCount  Int?            @map("token_count")
  startToken  Int?            @map("start_token")
  endToken    Int?            @map("end_token")
  sha256      String
  metadata    Json            @db.JsonB
  embedding   Unsupported("vector")
  ingestedAt  DateTime        @default(now()) @map("ingested_at") @db.Timestamptz(6)

  @@index([documentId], map: "idx_atticus_chunks_document")
  @@index([sourcePath], map: "idx_atticus_chunks_source_path")
  @@unique([documentId, sha256], map: "idx_atticus_chunks_doc_sha")
  @@map("atticus_chunks")
}
