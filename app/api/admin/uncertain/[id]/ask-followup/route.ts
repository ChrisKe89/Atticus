/**
 * Autogenerated documentation for `app/api/admin/uncertain/[id]/ask-followup/route.ts` within the Atticus codebase.
 * Key exports: follow the named or default exports defined below; inputs and outputs remain as implemented and correlate with related modules via existing imports.
 * Documentation onlyâ€”do not modify runtime behavior when updating this comment.
 */

import { NextResponse } from "next/server";
import { Role } from "@prisma/client";
import { getServerAuthSession } from "@/lib/auth";
import { withRlsContext } from "@/lib/rls";

function canRecordFollowUp(role: Role | undefined): boolean {
  return role === Role.ADMIN || role === Role.REVIEWER;
}

type FollowUpBody = {
  prompt?: string;
};

export async function POST(request: Request, { params }: { params: { id: string } }) {
  const session = await getServerAuthSession();
  if (!session) {
    return NextResponse.json({ error: "unauthorized" }, { status: 401 });
  }
  if (!canRecordFollowUp(session.user.role)) {
    return NextResponse.json({ error: "forbidden" }, { status: 403 });
  }

  const { id } = params;
  let body: FollowUpBody;
  try {
    body = (await request.json()) as FollowUpBody;
  } catch (error) {
    body = {};
  }

  const prompt = typeof body.prompt === "string" ? body.prompt.trim() : "";
  if (!prompt) {
    return NextResponse.json(
      { error: "invalid_request", detail: "Follow-up prompt is required." },
      { status: 400 }
    );
  }

  const timestamp = new Date().toISOString();

  const result = await withRlsContext(session, async (tx) => {
    const existing = await tx.chat.findUnique({
      where: { id },
      select: { id: true, status: true, auditLog: true, orgId: true },
    });
    if (!existing) {
      return null;
    }

    const auditLog = Array.isArray(existing.auditLog) ? [...existing.auditLog] : [];
    auditLog.push({
      action: "followup",
      at: timestamp,
      actorId: session.user.id,
      actorRole: session.user.role,
      prompt,
    });

    const updated = await tx.chat.update({
      where: { id },
      data: { followUpPrompt: prompt, auditLog },
      select: {
        id: true,
        followUpPrompt: true,
        auditLog: true,
        status: true,
        requestId: true,
      },
    });

    await tx.ragEvent.create({
      data: {
        orgId: existing.orgId,
        actorId: session.user.id,
        actorRole: session.user.role,
        action: "chat.followup_recorded",
        entity: "chat",
        chatId: updated.id,
        requestId: updated.requestId,
        after: {
          status: updated.status,
          followUpPrompt: updated.followUpPrompt,
        },
      },
    });

    return updated;
  });

  if (result === null) {
    return NextResponse.json({ error: "not_found" }, { status: 404 });
  }

  return NextResponse.json({
    id: result.id,
    followUpPrompt: result.followUpPrompt,
    auditLog: result.auditLog ?? [],
  });
}
